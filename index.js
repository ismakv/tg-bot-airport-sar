// ----- –∏–º–ø–æ—Ä—Ç—ã -----
require('dotenv').config();
const { Telegraf } = require('telegraf');
const axios       = require('axios');
const cron        = require('node-cron');
const fs          = require('fs').promises;

// ----- –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const YANDEX_API_KEY = process.env.YANDEX_API_KEY;

if (!TELEGRAM_TOKEN || !YANDEX_API_KEY) {
  console.error('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ YANDEX_API_KEY –≤ .env');
  process.exit(1);
}

// ----- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ -----
const bot = new Telegraf(TELEGRAM_TOKEN);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', err);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.use((ctx, next) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', ctx.updateType);
  return next();
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function launchBot() {
  return Promise.race([
    bot.launch(),
    new Promise((_, reject) => {
      setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (30 —Å–µ–∫—É–Ω–¥)'));
      }, 30000);
    })
  ]);
}

// ----- —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ -----
const SUB_FILE = 'subscriptions.json';
let subscribers = new Set();        // chat_id
const sentCache = new Set();        // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π: chatId|flightKey

async function loadSubs() {
  try {
    const data = await fs.readFile(SUB_FILE, 'utf-8');
    subscribers = new Set(JSON.parse(data));
  } catch { subscribers = new Set(); }
}

async function saveSubs() {
  await fs.writeFile(SUB_FILE, JSON.stringify([...subscribers], null, 2));
}

// ----- —É—Ç–∏–ª–∏—Ç—ã -----
function fmtTime(date) {
  return date.toLocaleTimeString('ru-RU', { 
    hour: '2-digit', 
    minute: '2-digit',
    timeZone: 'Europe/Saratov'
  });
}

// ----- Telegram-–∫–æ–º–∞–Ω–¥—ã -----
bot.start(ctx => ctx.reply(
  '–ü—Ä–∏–≤–µ—Ç! /subscribe ‚Äî –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, /unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.'
));

bot.command('subscribe', async ctx => {
  const id = ctx.chat.id;
  if (subscribers.has(id)) return ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ‚úîÔ∏è');
  subscribers.add(id);
  await saveSubs();
  ctx.reply('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ë—É–¥—É –æ–ø–æ–≤–µ—â–∞—Ç—å –∑–∞ —á–∞—Å –¥–æ —Ä–µ–π—Å–∞.');
});

bot.command('unsubscribe', async ctx => {
  const id = ctx.chat.id;
  if (subscribers.delete(id)) {
    await saveSubs();
    ctx.reply('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.');
  } else ctx.reply('–í—ã –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.');
});

bot.help(ctx => ctx.reply(
  '/subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n/unsubscribe ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞'
));

// ----- —Ä–∞–±–æ—Ç–∞ —Å –Ø–Ω–¥–µ–∫—Å.–†–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ -----
const STATION = 'GSV';       // IATA –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ì–∞–≥–∞—Ä–∏–Ω
const LANG    = 'ru_RU';

async function fetchFlights(event) {
  // event: 'departure' | 'arrival'
  const date = new Date().toISOString().split('T')[0];
  const url =
    `https://api.rasp.yandex.net/v3.0/schedule/?apikey=${YANDEX_API_KEY}` +
    `&station=${STATION}&system=iata&transport_types=plane&event=${event}` +
    `&date=${date}&lang=${LANG}&format=json`;
  const { data } = await axios.get(url);
  return data.schedule || data.result || [];
}

async function checkFlights() {
    console.log('checkFlights');
  const [departures, arrivals] = await Promise.all([
    fetchFlights('departure'),
    fetchFlights('arrival')
  ]);

  const now = new Date();
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–æ–Ω—É –°–∞—Ä–∞—Ç–æ–≤–∞
  const saratovOffset = 4; // UTC+4
  const utcOffset = now.getTimezoneOffset();
  const saratovNow = new Date(now.getTime() + (utcOffset + saratovOffset * 60) * 60000);
  
  const toSend = [];   // {msg, key}

  const scan = (list, type) => {
    list.forEach(f => {
      const timeStr = type === 'dep'
        ? (f.departure || f.departure_time)
        : (f.arrival   || f.arrival_time);
      if (!timeStr) return;

      const when = new Date(timeStr);
      const diff = Math.round((when - saratovNow) / 60000);   // –≤ –º–∏–Ω—É—Ç–∞—Ö
      
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–µ–π—Å—ã –∏ —Ä–µ–π—Å—ã –±–æ–ª–µ–µ —á–µ–º –∑–∞ 65 –º–∏–Ω—É—Ç
      if (diff < 0 || diff > 65) return;

      const num  = f.thread?.number || '???';
      const city = type === 'dep'
        ? (f.thread?.to?.title   || '')
        : (f.thread?.from?.title || '');

      let msg;
      if (diff >= 55 && diff <= 65) {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å
        msg = type === 'dep'
          ? `‚úàÔ∏è –†–µ–π—Å *${num}* –≤—ã–ª–µ—Ç–∞–µ—Ç –≤ ${city} —á–µ—Ä–µ–∑ —á–∞—Å (–≤ ${fmtTime(when)}).`
          : `üõ¨ –†–µ–π—Å *${num}* –∏–∑ ${city} –ø—Ä–∏–±—É–¥–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å (–≤ ${fmtTime(when)}).`;
      } else {
        // –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞
        const minutes = Math.max(diff, 0);
        msg = type === 'dep'
          ? `‚ö†Ô∏è –°–∫–æ—Ä–æ –≤—ã–ª–µ—Ç! –†–µ–π—Å *${num}* –≤—ã–ª–µ—Ç–∞–µ—Ç –≤ ${city} —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω (–≤ ${fmtTime(when)}).`
          : `‚ö†Ô∏è –°–∫–æ—Ä–æ –ø—Ä–∏–ª–µ—Ç! –†–µ–π—Å *${num}* –∏–∑ ${city} –ø—Ä–∏–±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω (–≤ ${fmtTime(when)}).`;
      }

      toSend.push({ msg, key: `${type}|${num}|${when.toISOString()}` });
    });
  };

  scan(departures, 'dep');
  scan(arrivals,   'arr');

  for (const chatId of subscribers) {
    for (const { msg, key } of toSend) {
      const k = `${chatId}|${key}`;
      if (sentCache.has(k)) continue;       // —É–∂–µ —Å–ª–∞–ª–∏
      await bot.telegram.sendMessage(chatId, msg, { parse_mode: 'Markdown' })
        .catch(e => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', e));
      sentCache.add(k);
    }
  }
}

// ----- –∑–∞–ø—É—Å–∫ -----
(async () => {
  try {
    console.log('start');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    console.log('TELEGRAM_TOKEN exists:', !!TELEGRAM_TOKEN);
    console.log('YANDEX_API_KEY exists:', !!YANDEX_API_KEY);
    
    try {
      await loadSubs();
      console.log('–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', e);
      subscribers = new Set();
    }

    console.log('–ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞...');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.launch()
      .then(() => {
        console.log('bot.launch() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
        throw err;
      });
      
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', subscribers.size);

    // –í–∫–ª—é—á–∞–µ–º graceful shutdown
    process.once('SIGINT', () => {
      console.log('SIGINT');
      bot.stop('SIGINT');
    });
    process.once('SIGTERM', () => {
      console.log('SIGTERM');
      bot.stop('SIGTERM');
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron
    console.log('–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron...');
    cron.schedule('*/10 * * * *', () => {
      console.log('Cron: –∑–∞–ø—É—Å–∫–∞–µ–º checkFlights');
      checkFlights().catch(e => console.error('–û—à–∏–±–∫–∞ –≤ checkFlights:', e));
    });
    console.log('Cron –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

  } catch (e) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
    process.exit(1);
  }
})().catch(e => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
  process.exit(1);
});
